[{"/Users/frida/Desktop/项目开发/react-component-library/src/index.js":"1","/Users/frida/Desktop/项目开发/react-component-library/src/App.js":"2","/Users/frida/Desktop/项目开发/react-component-library/src/reportWebVitals.js":"3","/Users/frida/Desktop/项目开发/react-component-library/src/router/index.js":"4","/Users/frida/Desktop/项目开发/react-component-library/src/router/config.js":"5","/Users/frida/Desktop/项目开发/react-component-library/src/page/home/index.js":"6","/Users/frida/Desktop/项目开发/react-component-library/src/page/portals/index.js":"7","/Users/frida/Desktop/项目开发/react-component-library/src/page/tree/index.js":"8","/Users/frida/Desktop/项目开发/react-component-library/src/page/tagsList/index.js":"9","/Users/frida/Desktop/项目开发/react-component-library/src/page/tooltip/index.js":"10","/Users/frida/Desktop/项目开发/react-component-library/src/page/searchList/index.jsx":"11"},{"size":468,"mtime":1610897887370,"results":"12","hashOfConfig":"13"},{"size":135,"mtime":1616750726198,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1610897887370,"results":"15","hashOfConfig":"13"},{"size":621,"mtime":1611112295860,"results":"16","hashOfConfig":"13"},{"size":619,"mtime":1617328930288,"results":"17","hashOfConfig":"13"},{"size":572,"mtime":1617328909374,"results":"18","hashOfConfig":"13"},{"size":4471,"mtime":1615454373150,"results":"19","hashOfConfig":"13"},{"size":5567,"mtime":1610897887370,"results":"20","hashOfConfig":"13"},{"size":1199,"mtime":1615538687280,"results":"21","hashOfConfig":"13"},{"size":224,"mtime":1617158121032,"results":"22","hashOfConfig":"13"},{"size":923,"mtime":1617357194946,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"sbeos1",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/frida/Desktop/项目开发/react-component-library/src/index.js",[],["49","50"],"/Users/frida/Desktop/项目开发/react-component-library/src/App.js",[],"/Users/frida/Desktop/项目开发/react-component-library/src/reportWebVitals.js",[],"/Users/frida/Desktop/项目开发/react-component-library/src/router/index.js",[],"/Users/frida/Desktop/项目开发/react-component-library/src/router/config.js",["51"],"/Users/frida/Desktop/项目开发/react-component-library/src/page/home/index.js",[],"/Users/frida/Desktop/项目开发/react-component-library/src/page/portals/index.js",[],"/Users/frida/Desktop/项目开发/react-component-library/src/page/tree/index.js",["52","53","54","55","56"],"import React, { useState, useEffect } from \"react\";\nimport { Tree, Button, Modal, Input } from \"antd\";\n\nconst initTreeData = [\n  {\n    title: \"0-0\",\n    value: \"0-0\",\n    key: \"0-0\",\n    children: [\n      {\n        title: \"0-0-0\",\n        value: \"0-0-0\",\n        key: \"0-0-0\",\n        children: [\n          { title: \"0-0-0-0\", value: \"0-0-0-0\", key: \"0-0-0-0\" },\n          { title: \"0-0-0-1\", value: \"0-0-0-1\", key: \"0-0-0-1\" },\n          { title: \"0-0-0-2\", value: \"0-0-0-2\", key: \"0-0-0-2\" },\n        ],\n      },\n      {\n        title: \"0-0-1\",\n        value: \"0-0-1\",\n        key: \"0-0-1\",\n        children: [\n          { title: \"0-0-1-0\", value: \"0-0-1-0\", key: \"0-0-1-0\" },\n          { title: \"0-0-1-1\", value: \"0-0-1-1\", key: \"0-0-1-1\" },\n          { title: \"0-0-1-2\", value: \"0-0-1-2\", key: \"0-0-1-2\" },\n        ],\n      },\n      {\n        title: \"0-0-2\",\n        value: \"0-0-2\",\n        key: \"0-0-2\",\n      },\n    ],\n  },\n  {\n    title: \"0-1\",\n    value: \"0-1\",\n    key: \"0-1\",\n    children: [\n      { title: \"0-1-0-0\", value: \"0-1-0-0\", key: \"0-1-0-0\" },\n      { title: \"0-1-0-1\", value: \"0-1-0-1\", key: \"0-1-0-1\" },\n      { title: \"0-1-0-2\", value: \"0-1-0-2\", key: \"0-1-0-2\" },\n    ],\n  },\n  {\n    title: \"0-2\",\n    value: \"0-2\",\n    key: \"0-2\",\n  },\n];\n\nconst ChangeModal = ({\n  visible,\n  currentValue,\n  closeModal,\n  changeTreeValue,\n  addFlag,\n}) => {\n  const { value = \"\", key } = currentValue;\n  const [modalVisible, setModalVisible] = useState(visible);\n  const [modalValue, setModalValue] = useState(\"\");\n  const changeModalValue = (e) => {\n    setModalValue(e.target.value);\n  };\n  const modalOk = () => {\n    closeModal();\n    setModalValue(\"\");\n    changeTreeValue(modalValue, key);\n  };\n  useEffect(() => {\n    if (!addFlag) setModalValue(value);\n  }, [value]);\n  useEffect(() => {\n    setModalVisible(visible);\n  }, [visible]);\n  useEffect(() => {\n    setModalValue(\"\");\n  }, []);\n  return (\n    <Modal\n      visible={modalVisible}\n      onCancel={() => {\n        setModalValue(\"\");\n        closeModal();\n      }}\n      maskClosable={false}\n      onOk={modalOk}\n    >\n      <Input value={modalValue} onChange={changeModalValue} />\n    </Modal>\n  );\n};\n\nconst TreeDom = () => {\n  const [treeData, setTreeData] = useState(initTreeData);\n  const [visible, setVisible] = useState(false);\n  const [currentValue, setCurrentValue] = useState({});\n  const [addFlag, setAddFlag] = useState(false);\n  const [samePath, setSamePath] = useState(false);\n\n  const renderTreeDom = (node) => {\n    node.map((item) => {\n      item.title = (\n        <div>\n          {item.value}\n          <Button\n            onClick={() => {\n              setVisible(true);\n              setAddFlag(false);\n              setCurrentValue(item);\n            }}\n          >\n            修改\n          </Button>\n          <Button\n            onClick={() => {\n              setVisible(true);\n              setAddFlag(true);\n              setCurrentValue(item);\n              setSamePath(false);\n            }}\n          >\n            添加子节点\n          </Button>\n          <Button\n            onClick={() => {\n              setVisible(true);\n              setAddFlag(true);\n              setCurrentValue(item);\n              setSamePath(true);\n            }}\n          >\n            添加同级节点\n          </Button>\n          <Button\n            onClick={() => {\n              deleteTreeDom(item.key, treeData);\n              renderTreeDom(treeData);\n              setTreeData([...treeData]);\n            }}\n          >\n            删除\n          </Button>\n        </div>\n      );\n      if (item.children) {\n        return renderTreeDom(item.children);\n      }\n      return item;\n    });\n  };\n\n  const deleteTreeDom = (key, node) => {\n    node.map((item, index) => {\n      if (item.key === key) {\n        node.splice(index, 1);\n      } else if (item.children) {\n        return deleteTreeDom(key, item.children);\n      }\n    });\n  };\n\n  const editTreeData = (node, value, key) => {\n    node.map((item) => {\n      if (item.key === key) {\n        item.value = value;\n        item.title = value;\n        return item;\n      } else if (item.children) {\n        return editTreeData(item.children, value, key);\n      }\n    });\n  };\n\n  // 添加子节点 | 添加同级节点\n  const addTreeNode = (node, value, key) => {\n    let timeStamp = new Date().getTime();\n    node.map((item, index) => {\n      let newItem = { value, title: value, key: timeStamp };\n      if (item.key === key) {\n        if (!samePath) {\n          if (item.children) {\n            item.children.push(newItem);\n          } else {\n            item.children = [newItem];\n          }\n        } else {\n          node.splice(index + 1, 0, newItem);\n        }\n      } else if (item.children) {\n        return addTreeNode(item.children, value, key);\n      }\n    });\n  };\n\n  const changeTreeValue = (value, key) => {\n    if (!addFlag) {\n      editTreeData(treeData, value, key);\n    } else {\n      addTreeNode(treeData, value, key);\n    }\n    renderTreeDom(treeData);\n    setTreeData([...treeData]);\n  };\n\n  useEffect(() => {\n    renderTreeDom(initTreeData);\n  }, []);\n  return (\n    <div>\n      <h2>完成树节点的增删查改</h2>\n      <Tree treeData={treeData}></Tree>\n      <ChangeModal\n        visible={visible}\n        closeModal={() => {\n          setVisible(false);\n          setCurrentValue({});\n        }}\n        currentValue={currentValue}\n        changeTreeValue={changeTreeValue}\n        addTreeNode={addTreeNode}\n        addFlag={addFlag}\n      />\n    </div>\n  );\n};\nexport default TreeDom;\n","/Users/frida/Desktop/项目开发/react-component-library/src/page/tagsList/index.js",["57"],"import React, { useState, useEffect } from \"react\"\nimport { Input, Tag } from \"antd\"\nconst MAX_LENGTH = 100\n\nconst TagsList = ({ value, onChange = () => {} }) => {\n  const [list, setList] = useState([])\n  useEffect(() => {\n    if (!value) return\n    if (list.length > MAX_LENGTH) return\n    let res = []\n    let str = value.replace(/，/g, \",\")\n    res = str.split(\",\").filter((item) => item)\n    res =\n      list.length + res.length > MAX_LENGTH\n        ? res.slice(0, MAX_LENGTH - list.length)\n        : res\n    setList([...list, ...res])\n    onChange()\n  }, [value])\n  return list.map((item, index) => <Tag key={index}>{item}</Tag>)\n}\n\nconst Page = () => {\n  const [tagStr, setTagStr] = useState(\"\")\n  return (\n    <div>\n      <h1>实现tagsList组件</h1>\n      <ul>\n        <li>组件接受value onChange</li>\n        <li>可以根据英文中文逗号分隔</li>\n        <li>tag长度不超过500</li>\n      </ul>\n      <p>Demo:</p>\n      <Input\n        style={{ width: 300 }}\n        onPressEnter={(e) => {\n          console.log(e.target.value)\n          setTagStr(e.target.value)\n        }}\n      />\n      <TagsList value={tagStr} onChange={() => {}} />\n    </div>\n  )\n}\nexport default Page\n","/Users/frida/Desktop/项目开发/react-component-library/src/page/tooltip/index.js",[],"/Users/frida/Desktop/项目开发/react-component-library/src/page/searchList/index.jsx",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":13},{"ruleId":"66","severity":1,"message":"67","line":74,"column":6,"nodeType":"68","endLine":74,"endColumn":13,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":156,"column":28,"nodeType":"72","messageId":"73","endLine":156,"endColumn":30},{"ruleId":"70","severity":1,"message":"71","line":166,"column":21,"nodeType":"72","messageId":"73","endLine":166,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":180,"column":28,"nodeType":"72","messageId":"73","endLine":180,"endColumn":30},{"ruleId":"66","severity":1,"message":"74","line":210,"column":6,"nodeType":"68","endLine":210,"endColumn":8,"suggestions":"75"},{"ruleId":"66","severity":1,"message":"76","line":19,"column":6,"nodeType":"68","endLine":19,"endColumn":13,"suggestions":"77"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'addFlag'. Either include it or remove the dependency array.","ArrayExpression",["80"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'renderTreeDom'. Either include it or remove the dependency array.",["81"],"React Hook useEffect has missing dependencies: 'list' and 'onChange'. Either include them or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},"Update the dependencies array to be: [addFlag, value]",{"range":"89","text":"90"},"Update the dependencies array to be: [renderTreeDom]",{"range":"91","text":"92"},"Update the dependencies array to be: [list, onChange, value]",{"range":"93","text":"94"},[1775,1782],"[addFlag, value]",[5069,5071],"[renderTreeDom]",[559,566],"[list, onChange, value]"]